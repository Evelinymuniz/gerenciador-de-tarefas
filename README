# üìã Gerenciador de Tarefas

API RESTful desenvolvida com Node.js puro e m√≥dulos nativos ‚Äî sem frameworks.

![Node.js](https://img.shields.io/badge/Node.js-20%2B-green?style=for-the-badge&logo=nodedotjs)
![ES Modules](https://img.shields.io/badge/ES%20Modules-Enabled-blue?style=for-the-badge)
![License](https://img.shields.io/badge/License-MIT-yellow?style=for-the-badge)




## üöÄ Vis√£o Geral

Este projeto educacional implementa uma API RESTful completa para gerenciamento de tarefas, constru√≠da do zero utilizando Node.js puro e seus m√≥dulos nativos. O objetivo principal √© demonstrar a cria√ß√£o de uma API robusta e escal√°vel sem a depend√™ncia de frameworks externos, focando em princ√≠pios de arquitetura limpa e modularidade.

### ‚ú® Funcionalidades Principais

- **Gerenciamento CRUD de Tarefas**: Crie, liste, edite e delete tarefas de forma eficiente.
- **Busca Flex√≠vel**: Encontre tarefas por t√≠tulo ou descri√ß√£o, facilitando a localiza√ß√£o de informa√ß√µes.
- **Controle de Status**: Marque ou desmarque tarefas como conclu√≠das, permitindo um acompanhamento claro do progresso.
- **Importa√ß√£o em Massa**: Importe m√∫ltiplas tarefas de uma s√≥ vez atrav√©s de arquivos CSV, otimizando o processo de adi√ß√£o de dados.
- **Persist√™ncia de Dados**: Utiliza o sistema de arquivos (File System) como um banco de dados baseado em JSON, garantindo a persist√™ncia dos dados de forma simples e eficaz.
- **Processamento de Streams**: Implementa streams para lidar com a importa√ß√£o de CSV, otimizando o uso de mem√≥ria e processamento para grandes volumes de dados.
- **Middlewares Customizados**: Utiliza middlewares personalizados para tratamento de requisi√ß√µes e respostas, garantindo flexibilidade e controle sobre o fluxo da aplica√ß√£o.
- **Arquitetura Limpa**: O projeto segue uma arquitetura limpa e modular, facilitando a manuten√ß√£o, escalabilidade e compreens√£o do c√≥digo.




## üõ†Ô∏è Tecnologias Utilizadas

Este projeto foi desenvolvido utilizando as seguintes tecnologias e conceitos:

- **Node.js 20+**: A plataforma de runtime JavaScript que permite a execu√ß√£o de c√≥digo JavaScript no lado do servidor.
- **ES Modules**: Utiliza√ß√£o do sistema de m√≥dulos nativo do JavaScript (import/export) para uma estrutura de c√≥digo mais moderna e organizada.
- **`fs` (File System)**: M√≥dulo nativo do Node.js para interagir com o sistema de arquivos, utilizado aqui para persistir os dados em formato JSON.
- **`stream`**: M√≥dulo nativo do Node.js para lidar com fluxos de dados, essencial para a importa√ß√£o eficiente de arquivos CSV.
- **`uuid`**: Biblioteca para gera√ß√£o de identificadores √∫nicos universais (UUIDs), garantindo que cada tarefa tenha um ID exclusivo.




## üìÅ Estrutura do Projeto

A estrutura do projeto foi pensada para ser modular e de f√°cil compreens√£o, separando as responsabilidades em diret√≥rios espec√≠ficos:

```bash
src/
‚îú‚îÄ‚îÄ middlewares/       # Fun√ß√µes intermedi√°rias para processamento de requisi√ß√µes (JSON & CSV)
‚îú‚îÄ‚îÄ mappers/           # L√≥gica para formata√ß√£o de dados de resposta
‚îú‚îÄ‚îÄ utils/             # Fun√ß√µes utilit√°rias e helpers (rotas, datas, CSV, query params)
‚îú‚îÄ‚îÄ database.js        # Gerenciamento da persist√™ncia de dados (File System JSON)
‚îú‚îÄ‚îÄ routes.js          # Defini√ß√£o das rotas da API e seus respectivos handlers
‚îî‚îÄ‚îÄ server.js          # Configura√ß√£o e inicializa√ß√£o do servidor HTTP
```




## ‚ñ∂Ô∏è Executando o Projeto

Para configurar e executar o projeto em sua m√°quina local, siga os passos abaixo:

1. **Clone o reposit√≥rio:**
   ```bash
   git clone https://github.com/Evelinymuniz/gerenciador-de-tarefas.git
   ```

2. **Navegue at√© o diret√≥rio do projeto:**
   ```bash
   cd gerenciador-de-tarefas
   ```

3. **Instale as depend√™ncias:**
   ```bash
   npm install
   ```

4. **Inicie o servidor em modo de desenvolvimento:**
   ```bash
   npm run dev
   ```

Ap√≥s iniciar o servidor, a API estar√° acess√≠vel em: `http://localhost:3333`




## üìå Endpoints da API

A API disponibiliza os seguintes endpoints para intera√ß√£o com as tarefas:

| M√©todo | Rota             | Descri√ß√£o                               |
|--------|------------------|-----------------------------------------|
| `GET`  | `/tasks`         | Lista todas as tarefas (com busca opcional por `title` ou `description` via query params) |
| `POST` | `/tasks`         | Cria uma nova tarefa                    |
| `PUT`  | `/tasks/:id`     | Atualiza o `title` e `description` de uma tarefa espec√≠fica |
| `PATCH`| `/tasks/:id/complete` | Marca ou desmarca uma tarefa como conclu√≠da |
| `DELETE`| `/tasks/:id`     | Deleta uma tarefa espec√≠fica            |
| `POST` | `/tasks/import`  | Importa m√∫ltiplas tarefas via arquivo CSV |




## üìù Exemplos de Uso

### Exemplo de Cria√ß√£o de Tarefa

Para criar uma nova tarefa, envie uma requisi√ß√£o `POST` para o endpoint `/tasks` com um corpo JSON contendo `title` e `description`:

```json
POST /tasks
Content-Type: application/json

{
  "title": "Estudar Node.js",
  "description": "Revisar conceitos de APIs REST"
}
```




### Exemplo de Importa√ß√£o via CSV

Para importar m√∫ltiplas tarefas de uma vez, envie um arquivo CSV para o endpoint `/tasks/import`. O CSV deve conter as colunas `title` e `description`:

```csv
title,description
Estudar Node.js,Revisar conceitos de APIs REST
Fazer exerc√≠cios,Praticar desenvolvimento
```




## üìä Exemplo de Resposta

Ao listar ou criar uma tarefa, a API retornar√° um objeto JSON com a seguinte estrutura:

```json
{
  "id": "uuid",
  "title": "Estudar Node.js",
  "description": "Revisar conceitos de APIs REST",
  "completed_at": null,
  "created_at": "05/08/2025, 14:30",
  "updated_at": "05/08/2025, 14:30"
}
```




## üß™ Teste com cURL

Voc√™ pode testar os endpoints da API diretamente do seu terminal utilizando o `cURL`:

### Listar todas as tarefas:
```bash
curl http://localhost:3333/tasks
```

### Criar uma nova tarefa:
```bash
curl -X POST http://localhost:3333/tasks \
  -H "Content-Type: application/json" \
  -d '{"title":"Nova tarefa","description":"Descri√ß√£o da nova tarefa"}'
```

### Marcar uma tarefa como conclu√≠da (substitua `:id` pelo ID da tarefa):
```bash
curl -X PATCH http://localhost:3333/tasks/SEU_ID_DA_TAREFA/complete
```

### Deletar uma tarefa (substitua `:id` pelo ID da tarefa):
```bash
curl -X DELETE http://localhost:3333/tasks/SEU_ID_DA_TAREFA
```




## ü§ù Contribui√ß√£o

Contribui√ß√µes s√£o muito bem-vindas! Se voc√™ deseja aprimorar este projeto, siga os passos abaixo:

1. Fa√ßa um **fork** deste reposit√≥rio.
2. Crie uma nova **branch** para sua funcionalidade ou corre√ß√£o de bug (`git checkout -b feature/minha-funcionalidade` ou `bugfix/correcao-de-bug`).
3. Fa√ßa suas altera√ß√µes e **commit** suas mudan√ßas (`git commit -m 'feat: Adiciona nova funcionalidade'`).
4. Fa√ßa o **push** da sua branch para o GitHub (`git push origin feature/minha-funcionalidade`).
5. Abra um **Pull Request** detalhando suas altera√ß√µes e o problema que elas resolvem ou a funcionalidade que adicionam.

Certifique-se de que seu c√≥digo siga as boas pr√°ticas e que os testes (se houver) estejam passando.




## üë©‚Äçüíª Desenvolvedora

Este projeto foi desenvolvido por:

**Eveliny Muniz**

- [GitHub](https://github.com/Evelinymuniz) 
- [LinkedIn](https://www.linkedin.com/in/evelinymuniz/) 




## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT. Consulte o arquivo [LICENSE](LICENSE) para mais detalhes.
